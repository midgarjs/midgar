[{"filePath":"/drone/src/src/bin/midgar.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/cli/init.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/cli/plugin.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/libs/cli.js","messages":[{"ruleId":"curly","severity":2,"message":"Expected { after 'if' condition.","line":44,"column":9,"nodeType":"IfStatement","messageId":"missingCurlyAfterCondition","fix":{"range":[1004,1116],"text":"{this._rejectRun(`Invalid command: ${this.program.args.join(' ')}\\nSee --help for a list of available commands.`)}"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":44,"column":38,"nodeType":"Program","endLine":44,"endColumn":39,"fix":{"range":[992,993],"text":""}},{"ruleId":"curly","severity":2,"message":"Expected { after 'else'.","line":46,"column":9,"nodeType":"IfStatement","messageId":"missingCurlyAfter","fix":{"range":[1140,1160],"text":"{this._resolveRun({})}"}}],"errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"\nimport commander from 'commander'\nimport { cosmiconfig } from 'cosmiconfig'\nimport Midgar from '../midgar'\nimport initCmds from '../cli/init'\nimport pluginCmds from '../cli/plugin'\n\n/**\n * Manage the Commander program\n * @class\n */\nclass Cli {\n  /**\n   * Construct\n   * init vars, create program and Midgar instance\n   */\n  constructor (argv, cwd) {\n    this.rcConfig = null\n    // Path of the config dir\n    this.configPath = null\n\n    this.argv = argv\n    /**\n     * Current working directory\n     */\n    this.cwd = cwd\n    this.mid = new Midgar()\n    this.mid.cli = this\n\n    this._runPromise = new Promise((resolve, reject) => {\n      this._resolveRun = resolve\n      this._rejectRun = reject\n    })\n\n    this.program = new commander.Command()\n    this.program.version('0.0.1')\n      // Config dir path\n      .option('-c, --config <path>', 'Config directory path')\n\n      /**\n       * Invalid command handler\n       */\n      .on('command:*', () => {\n        if (this.configPath !== null) \n          this._rejectRun(`Invalid command: ${this.program.args.join(' ')}\\nSee --help for a list of available commands.`)\n        else\n          this._resolveRun({})\n      })\n  }\n\n  /**\n   * Get the config path, init midgard\n   * and load plugins commands\n   */\n  async init () {\n    const rcConfig = await this._loadRCFile()\n\n    // If config path is in the rc config\n    if (rcConfig && rcConfig.configPath) {\n      this.configPath = rcConfig.configPath\n    }\n\n    // Parse options to get config dir path\n    this.program.parseOptions(this.program.normalize(this.argv.slice(2)))\n    // If option config is set the config path\n    if (this.program.config && this.program.config.trim()) {\n      this.configPath = this.program.config.trim()\n    }\n\n    this.addCommands(initCmds)\n    this.addCommands(pluginCmds)\n\n    // Don't init Midgar for plugin command\n    const command = this.argv[2]\n    const skipedCommands = [\n      'add',\n      'rm',\n      'enable',\n      'disable'\n    ]\n\n    if (this.configPath && !skipedCommands.includes(command)) {\n      // Init midgar and load plugin cli commands\n      await this.mid.start(this.configPath)\n      // Add cli plugin dir\n      this.mid.pm.addModuleType('cli', 'cli')\n\n      await this.loadPluginsCommands()\n    } else if (this.configPath) {\n      await this.mid.loadConfig(this.configPath)\n    }\n  }\n\n  /**\n   * Load .midgarrc file and return his content\n   * Return null if no rc file is found\n   *\n   * @return {Object|null}\n   * @private\n   */\n  async _loadRCFile () {\n    const explorer = cosmiconfig('midgar')\n    const result = await explorer.search(this.cwd)\n    // result.config is the parsed configuration object.\n    return result ? result.config : null\n  }\n\n  /**\n   * Add commands to commander program\n   *\n   * @param {Array} commands Array of comamnd Object\n   */\n  addCommands (commands) {\n    for (let i = 0; i < commands.length; i++) {\n      this.addCommand(commands[i])\n    }\n  }\n\n  /**\n   * Add a command to the program\n   *\n   * @param {object} command Command Object\n   */\n  addCommand (command) {\n    const cmd = this.program.command(command.command)\n      .description(command.description)\n\n    if (command.options) this._addCommandOptions(cmd, command.options)\n\n    cmd.action((...args) => {\n      command.action(this.mid, ...args).then((result) => {\n        this._resolveRun(result)\n      }).catch(error => {\n        this._rejectRun(error)\n      })\n    })\n  }\n\n  /**\n   * Add Option to a commander command\n   *\n   * @param {Command} cmd     Commander command\n   * @param {Array}   options Command options\n   * @private\n   */\n  _addCommandOptions (cmd, options) {\n    // check options type\n    if (!Array.isArray(options)) throw new TypeError('@midgar/midgar: Invalid cli options type !')\n\n    for (const option of options) {\n      // Check option def\n      if (!option.flags || !option.description) throw new Error('@midgar/midgar: Invalid cli option def !')\n\n      const args = [\n        option.flags,\n        option.description\n      ]\n\n      // Add processing arg if exist\n      if (option.processing !== undefined) args.push(option.processing)\n      // Add default arf if exist\n      if (option.default !== undefined) args.push(option.default)\n\n      cmd.option(...args)\n    }\n  }\n\n  /**\n   * Get all plugins cli files and add commands\n   */\n  async loadPluginsCommands () {\n    // Get cli files content\n    const files = await this.mid.pm.importModules('cli')\n    for (let i = 0; i < files.length; i++) {\n      this.addCommands(files[i].export)\n    }\n  }\n\n  /**\n   * Parse argv and run command\n   * Wait for action result promise\n   * @return {Any}\n   */\n  run () {\n    this.program.parse(this.argv)\n    return this._runPromise\n  }\n}\n\nexport default Cli\n"},{"filePath":"/drone/src/src/libs/config.js","messages":[{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":16,"column":3,"nodeType":"Program","endLine":16,"endColumn":4,"fix":{"range":[427,428],"text":""}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nimport path from 'path'\nimport { assignRecursive, asyncFileExists } from '@midgar/utils'\n\nconst CONFIG_FILE_NAME = 'config'\n\n/**\n * Load config files in a folder\n * load the file {prefix}.config.json\n * load the file {prefix}.config.{MODE}.json\n * Mode are prod and dev\n *\n * @param {string} configDir config directory path\n * @param {string} prefix config prefix for the files name\n * @param {boolean} require require flag\n * \n * @return {object}\n * @private\n */\nasync function loadConfig (configDir, env) {\n  const config = {}\n  const mainConfig = await loadConfigfile(path.join(configDir, CONFIG_FILE_NAME), true)\n  assignRecursive(config, mainConfig)\n\n  const modeConfig = await loadConfigfile(path.join(configDir, CONFIG_FILE_NAME + '.' + env))\n  assignRecursive(config, modeConfig)\n\n  return config\n}\n\n/**\n * load a config file, parse the json and merge it into the config object\n * if the require flag is at true and the file not exist throw an error\n *\n * @param {string} filePath config file path\n * @param {boolean} requireMode require flag\n *\n * @return {Object|Array}\n * @private\n */\nasync function loadConfigfile (filePath, requireMode = false) {\n  const exist = await asyncFileExists(filePath + '.js')\n  if (exist) {\n    const { default: config } = await import(filePath)\n    return config\n  } else if (requireMode) {\n    throw new Error(`@midgar/midgar: the file ${filePath}.js doesn't exist !`)\n  }\n}\n\nexport {\n  CONFIG_FILE_NAME,\n  loadConfig\n}\n\nexport default loadConfig\n"},{"filePath":"/drone/src/src/libs/logger.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/libs/plugin-manager.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/midgar.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/drone/src/src/plugin.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}]